pico-8 cartridge // http://www.pico-8.com
version 39
__lua__
-- picodachi cabin
-- by cubee 🐱

-- init

function _init()
 -- 12
 --pal({[0]=0,128,129,1,133,141,5,13,134,6,135,7},1)
 --dark=hexplit"01121d64493d1d1"
 dark=hexplit"01121d62493112e"

 char_details={
  eye={
   type=1,
   x=0,
   y=0,
   a=0
  },
  brow={
   type=1,
   x=0,
   y=0,
   a=0
  },
  mouth={
   type=0,
   y=0
  },
  hair=0,
  colour=8
 }

 t=0
 dp=0

 cam={
  x=0,y=-8,z=-10,
	 pitch=0,yaw=0
 
 }

	file=file or ""
	
	-- get file
	repeat
	
	if stat(120) then
	 for i=0,serial(0x800,0x8000,0x8000-1) do
	
	  file..=chr(@(0x8000+i))
	 end
	
	end
	
	
	cls()
	?"drop file to load (max 32kb)",1,1,7

	?file,1,8,13
	
	flip()
	until file~=""
	
	-- load file into array
	local currentcolour=5
	for l in all(split(file,"\n")) do

	 local part=split(l," ")
	 local k=deli(part,1)

	 if k=="v" then
	  add(model.verts,{x=tonum(part[1])or 0,y=-(tonum(part[2])or 0),z=-(tonum(part[3])or 0)})

	 elseif k=="vt" then
	  add(model.uvs,{u=128*(tonum(part[1])or 0),v=128*(tonum(part[2])or 0)})

	 elseif k=="vn" then
	  add(model.normals,{x=tonum(part[1])or 0,y=tonum(part[2])or 0,z=tonum(part[3])or 0})

  --materials 0-15 are p8 colours
  --strings use spritesheet
	 elseif k=="usemtl" then
	  currentcolour=part[1]

	 elseif k=="f" then
	  local face={
		  colour=currentcolour-- 1+rnd(15)
		 }

	  for i in all(part) do
	   i=split(i,"/")
	
	   add(face,{vert=i[1],uv=i[2]})
	   face.normal=model.normals[i[3]] or face.normal or {z=0,y=0,z=0}

	  end
	
	  add(model.faces,face)

	 elseif k=="c" then
	  currentcolour=tonum(part[1]) or 14

	 else
	  -- do nothing
	 
	 end
	
	end
	
	
	
	
end--init
	
	
	
	
-->8
-- update

function _update()

 local angle=-cam.yaw

	local cxv,czv=0,0
	local speed=0.5
	if(btn(0,1))cxv,czv=-sin(angle-0.25)*speed,cos(angle-0.25)*speed
	if(btn(1,1))cxv,czv=-sin(angle+0.25)*speed,cos(angle+0.25)*speed
	if(btn(2,1))cxv,czv=-sin(angle)*speed,cos(angle)*speed
	if(btn(3,1))cxv,czv=sin(angle)*speed,-cos(angle)*speed
	cam.x+=cxv
	cam.z+=czv

	if(btn(0))cam.yaw+=.01
	if(btn(1))cam.yaw-=.01
	if(btn(2))cam.pitch-=.01
	if(btn(3))cam.pitch+=.01

 cam.yaw%=1
 cam.pitch%=1


	t=max(t+1)
end

-->8
-- draw

function _draw()

	cls(13)

	draw_object(person,1,1,1,
 	(time()/4)%1,
  (time()/4)%1,
 	(time()/4)%1
	)

	--draw_object(person,1,1,1,rnd())



 ?cam.yaw,1,64,7
 ?dp

end

-->8
-- model details

-- armature
humanoid={
	bones={
	 body={
	  parent="",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts="1-20,30-40"
	 },
	 head={
	  parent="body",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 },
	 leg_l1={
	  parent="body",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 },
	 leg_l2={
	  parent="leg_l1",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 },
	 leg_r1={
	  parent="body",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 },
	 leg_r2={
	  parent="leg_r1",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 },
	 arm_l1={
	  parent="body",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 },
	 arm_l2={
	  parent="leg_l1",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 },
	 arm_r1={
	  parent="body",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 },
	 arm_r2={
	  parent="leg_r1",
	  x=0,y=0,z=0,
	  pitch=0,yaw=0,roll=0,
	  verts={}
	 }
	},

 anims={
  idle={
   speed=1,-- seconds btw frames
   frames={
    {
     head="0.2,0.1,-0.1"
    },
    {
     head="-0.2,-0.1,0.1"
    }
   }

  }



 }

}

-- model base
model={
 s=1,
	verts={},
	uvs={},
	normals={},
	faces={}
}

-- person
person={
--[[
 models={
  model,
  model
 },]]
 model=model,

 armature=humanoid,
 anim="idle",
 anim_t=0,

 x=0,y=0,z=0,
 pitch=0,yaw=0,roll=0

}

--[[
file=[[
# blender v3.0.0 obj file: 'bod-dress.blend'
# www.blender.org
mtllib bod-dress.mtl
o arm_cube.001
v 0.606774 4.349856 0.250818
v 0.583561 4.860320 0.010362
v 0.606774 4.349856 -0.251271
v 2.564201 4.874043 0.000000
v 1.517040 4.370709 0.220034
v 1.517040 4.810778 0.000000
v 1.517040 4.370709 -0.220034
v 2.564201 4.339076 0.267484
v 2.564201 4.339076 -0.267484
v 0.064267 4.834167 0.000000
v 2.742713 4.575872 -0.044018
v -0.606774 4.349856 0.250818
v -0.583561 4.860320 0.010362
v -0.606774 4.349856 -0.251271
v -2.564201 4.874043 0.000000
v -1.517040 4.370709 0.220034
v -1.517040 4.810778 0.000000
v -1.517040 4.370709 -0.220034
v -2.564201 4.339076 0.267484
v -2.564201 4.339076 -0.267484
v -0.064267 4.834167 0.000000
v -2.742713 4.575872 -0.044018
vt 0.375000 0.250000
vt 0.625000 0.250000
vt 0.625000 0.500000
vt 0.625000 0.750000
vt 0.375000 0.750000
vt 0.375000 0.750000
vt 0.375000 1.000000
vt 0.125000 0.500000
vt 0.375000 0.500000
vt 0.375000 0.500000
vt 0.375000 0.000000
vt 0.463641 0.169320
vt 0.625000 0.750000
vt 0.625000 1.000000
vt 0.625000 0.500000
vt 0.125000 0.750000
vt 0.375000 0.250000
vt 0.625000 0.500000
vt 0.625000 0.250000
vt 0.625000 0.750000
vt 0.375000 0.750000
vt 0.375000 0.750000
vt 0.375000 1.000000
vt 0.125000 0.500000
vt 0.375000 0.500000
vt 0.375000 0.500000
vt 0.375000 0.000000
vt 0.463641 0.169320
vt 0.625000 0.750000
vt 0.625000 1.000000
vt 0.625000 0.500000
vt 0.125000 0.750000
vn 0.0144 0.4566 -0.8896
vn -0.0270 0.4471 0.8941
vn 0.0200 0.4471 0.8942
vn 0.0229 -0.9997 0.0000
vn -0.0302 -0.9995 0.0000
vn -0.0270 0.4471 -0.8941
vn -0.0394 0.4243 0.9046
vn -0.0052 0.4559 -0.8900
vn 0.0327 0.4271 0.9036
vn 0.0204 0.4471 -0.8942
vn -0.0144 0.4566 -0.8896
vn 0.0270 0.4471 0.8941
vn -0.0200 0.4471 0.8942
vn -0.0229 -0.9997 0.0000
vn 0.0302 -0.9995 0.0000
vn 0.0270 0.4471 -0.8941
vn 0.0394 0.4243 0.9046
vn 0.0052 0.4559 -0.8900
vn -0.0327 0.4271 0.9036
vn -0.0204 0.4471 -0.8942
usemtl none
s off
c 8
f 3/1/1 2/2/1 6/3/1
f 6/4/2 5/5/2 8/6/2
f 5/5/3 6/4/3 1/7/3
f 3/8/4 7/9/4 5/5/4
f 5/5/5 7/9/5 9/10/5
f 7/9/6 6/3/6 9/10/6
f 1/11/7 2/2/7 10/12/7
f 2/2/8 3/1/8 10/12/8
f 8/6/2 4/13/2 6/4/2
f 1/7/9 6/4/9 2/14/9
f 9/10/6 6/3/6 4/15/6
f 6/3/10 7/9/10 3/1/10
f 9/10/5 8/6/5 5/5/5
f 5/5/4 1/16/4 3/8/4
f 14/17/11 17/18/11 13/19/11
f 17/20/12 19/21/12 16/22/12
f 16/22/13 12/23/13 17/20/13
f 14/24/14 16/22/14 18/25/14
f 16/22/15 20/26/15 18/25/15
f 18/25/16 20/26/16 17/18/16
f 12/27/17 21/28/17 13/19/17
f 13/19/18 21/28/18 14/17/18
f 19/21/12 17/20/12 15/29/12
f 12/23/19 13/30/19 17/20/19
f 20/26/16 15/31/16 17/18/16
f 17/18/20 14/17/20 18/25/20
f 20/26/15 16/22/15 19/21/15
f 16/22/14 14/24/14 12/32/14
o leg_cube.002
v 0.424637 0.000000 0.798303
v 0.424637 0.509840 0.341927
v 0.071092 0.000000 -0.370685
v 0.089521 0.509840 -0.323441
v 0.117452 1.828766 -0.304955
v 0.424637 1.828766 0.304955
v 0.778182 0.000000 -0.370685
v 0.759753 0.509840 -0.323441
v 0.731822 1.828766 -0.304955
v 0.045513 2.987436 -0.335545
v 0.424637 2.987436 0.417678
v 0.690092 2.987436 -0.301665
v -0.424637 0.000000 0.798303
v -0.424637 0.509840 0.341927
v -0.071092 0.000000 -0.370685
v -0.089521 0.509840 -0.323441
v -0.117452 1.828766 -0.304955
v -0.424637 1.828766 0.304955
v -0.778182 0.000000 -0.370685
v -0.759753 0.509840 -0.323441
v -0.731822 1.828766 -0.304955
v -0.045513 2.987436 -0.335545
v -0.424637 2.987436 0.417678
v -0.690092 2.987436 -0.301665
vt 0.375000 0.000000
vt 0.625000 0.000000
vt 0.375000 0.250000
vt 0.625000 0.500000
vt 0.375000 0.500000
vt 0.625000 0.750000
vt 0.375000 0.750000
vt 0.625000 0.250000
vt 0.625000 0.000000
vt 0.625000 0.250000
vt 0.625000 0.750000
vt 0.625000 0.250000
vt 0.625000 0.500000
vt 0.625000 0.500000
vt 0.625000 0.750000
vt 0.625000 0.000000
vt 0.375000 0.000000
vt 0.375000 0.250000
vt 0.625000 0.000000
vt 0.375000 0.500000
vt 0.625000 0.500000
vt 0.375000 0.750000
vt 0.625000 0.750000
vt 0.625000 0.250000
vt 0.625000 0.250000
vt 0.625000 0.000000
vt 0.625000 0.750000
vt 0.625000 0.250000
vt 0.625000 0.500000
vt 0.625000 0.500000
vt 0.625000 0.750000
vt 0.625000 0.000000
vn -0.9266 0.2508 0.2802
vn 0.0000 0.0923 -0.9957
vn 0.9266 0.2508 0.2802
vn -0.8923 -0.0435 0.4494
vn 0.8930 0.0126 0.4498
vn 0.0000 0.0140 -0.9999
vn -0.8930 0.0126 0.4498
vn 0.0000 0.0028 -1.0000
vn 0.9376 -0.0337 0.3460
vn 0.8927 0.0309 0.4496
vn -0.8924 -0.0437 0.4492
vn 0.0525 -0.0231 -0.9984
vn 0.8931 -0.0094 0.4498
vn -0.8931 -0.0094 0.4498
vn 0.8923 -0.0435 0.4494
vn -0.9376 -0.0337 0.3460
vn -0.8927 0.0309 0.4496
vn 0.8924 -0.0437 0.4492
vn -0.0525 -0.0231 -0.9984
usemtl none
s off
c 5
f 23/33/21 24/34/21 25/35/21
f 25/35/22 30/36/22 29/37/22
f 29/37/23 24/38/23 23/39/23
f 27/40/24 28/41/24 32/42/24
f 24/38/25 30/36/25 28/43/25
f 30/36/26 26/44/26 27/40/26
f 26/44/27 28/41/27 27/40/27
f 31/45/28 27/40/28 34/46/28
f 28/43/29 34/46/29 33/47/29
f 28/43/25 30/36/25 31/45/25
f 34/46/30 28/43/30 31/45/30
f 32/42/31 28/41/31 33/48/31
f 28/41/27 26/44/27 24/34/27
f 27/40/26 31/45/26 30/36/26
f 34/46/32 27/40/32 32/42/32
f 30/36/22 25/35/22 26/44/22
f 24/38/33 29/37/33 30/36/33
f 25/35/34 24/34/34 26/44/34
f 35/49/23 37/50/23 36/51/23
f 37/50/22 41/52/22 42/53/22
f 41/52/21 35/54/21 36/55/21
f 39/56/35 44/57/35 40/58/35
f 36/55/27 40/59/27 42/53/27
f 42/53/26 39/56/26 38/60/26
f 38/60/25 39/56/25 40/58/25
f 43/61/28 46/62/28 39/56/28
f 40/59/36 45/63/36 46/62/36
f 40/59/27 43/61/27 42/53/27
f 46/62/37 43/61/37 40/59/37
f 44/57/38 45/64/38 40/58/38
f 40/58/25 36/51/25 38/60/25
f 39/56/26 42/53/26 43/61/26
f 46/62/39 44/57/39 39/56/39
f 42/53/22 38/60/22 37/50/22
f 36/55/34 42/53/34 41/52/34
f 37/50/33 38/60/33 36/51/33
o dress_cube.005
v 0.000000 5.323950 -0.115468
v 0.829692 2.973738 -0.339502
v 0.829692 2.973738 0.338278
v 0.000000 2.973738 -0.708197
v 0.000000 2.960456 0.714416
v 0.696707 4.238743 -0.211389
v 0.000000 4.238743 0.555608
v 0.696707 4.238743 0.248573
v 0.000000 4.238743 -0.551883
v 0.000000 2.155442 -1.045012
v 0.000000 2.155442 0.975264
v 0.992028 2.155442 -0.452802
v 0.992028 2.155442 0.470451
v -0.829692 2.973738 -0.339502
v -0.829692 2.973738 0.338278
v -0.696707 4.238743 -0.211389
v -0.696707 4.238743 0.248573
v -0.992028 2.155442 -0.452802
v -0.992028 2.155442 0.470451
vt 0.500000 0.750000
vt 0.625000 1.000000
vt 0.500000 1.000000
vt 0.375000 0.500000
vt 0.375000 0.750000
vt 0.375000 0.500000
vt 0.500000 0.500000
vt 0.625000 0.750000
vt 0.500000 0.250000
vt 0.625000 0.500000
vt 0.375000 0.250000
vt 0.375000 0.750000
vt 0.375000 1.000000
vt 0.375000 1.000000
vt 0.375000 0.250000
vt 0.500000 0.750000
vt 0.375000 0.500000
vt 0.375000 0.500000
vt 0.375000 0.750000
vt 0.500000 0.500000
vt 0.375000 0.750000
vn 0.3510 0.4925 0.7964
vn 0.9809 0.1946 0.0000
vn 0.8415 0.5402 0.0000
vn 0.4130 0.3398 -0.8450
vn 0.4035 0.1122 -0.9081
vn 0.9945 0.1045 0.0000
vn 0.4088 0.1125 0.9057
vn 0.4416 0.2278 0.8678
vn 0.3801 0.3521 -0.8553
vn 0.4010 0.1067 0.9099
vn 0.3922 0.2836 0.8751
vn 0.4350 0.1359 -0.8901
vn 0.5005 0.2154 -0.8385
vn -0.3510 0.4925 0.7964
vn -0.9809 0.1946 0.0000
vn -0.8415 0.5402 0.0000
vn -0.4130 0.3398 -0.8450
vn -0.4035 0.1122 -0.9081
vn -0.9945 0.1045 0.0000
vn -0.4088 0.1125 0.9057
vn -0.4416 0.2278 0.8678
vn -0.3801 0.3521 -0.8553
vn -0.4010 0.1067 0.9099
vn -0.3922 0.2836 0.8751
vn -0.4350 0.1359 -0.8901
vn -0.5005 0.2154 -0.8385
usemtl material
s off
c 8
f 54/65/40 47/66/40 53/67/40
f 48/68/41 59/69/41 58/70/41
f 52/71/42 47/72/42 54/65/42
f 55/73/43 47/74/43 52/71/43
f 50/75/44 55/73/44 48/68/44
f 48/68/45 52/71/45 54/65/45
f 49/76/46 53/67/46 51/77/46
f 49/76/47 57/78/47 59/69/47
f 50/75/48 48/68/48 56/79/48
f 53/67/49 49/76/49 54/65/49
f 57/78/50 49/76/50 51/77/50
f 59/69/41 48/68/41 49/76/41
f 54/65/45 49/76/45 48/68/45
f 48/68/51 55/73/51 52/71/51
f 56/79/52 48/68/52 58/70/52
f 63/80/53 53/67/53 47/66/53
f 60/81/54 64/82/54 65/83/54
f 62/84/55 63/80/55 47/72/55
f 55/73/56 62/84/56 47/74/56
f 50/75/57 60/81/57 55/73/57
f 60/81/58 63/80/58 62/84/58
f 61/85/59 51/77/59 53/67/59
f 61/85/60 65/83/60 57/78/60
f 50/75/61 56/79/61 60/81/61
f 53/67/62 63/80/62 61/85/62
f 57/78/63 51/77/63 61/85/63
f 65/83/54 61/85/54 60/81/54
f 63/80/58 60/81/58 61/85/58
f 60/81/64 62/84/64 55/73/64
f 56/79/65 64/82/65 60/81/65
o head_cube.004
v 0.000000 5.096364 -0.638226
v 0.537878 5.079640 -0.353491
v 0.466938 4.942616 0.452874
v 0.762619 6.361453 0.531880
v 0.000000 6.604852 1.004911
v 0.000000 4.721035 0.674827
v 0.000000 5.572397 -0.809211
v 0.719976 5.572397 -0.637650
v 0.889941 5.572397 -0.047138
v 0.772555 5.448008 0.693997
v 0.000000 5.454697 1.104125
v 0.000000 5.517863 1.004911
v -0.537878 5.079640 -0.353491
v -0.466938 4.942616 0.452874
v -0.762619 6.361453 0.531880
v -0.719976 5.572397 -0.637650
v -0.889941 5.572397 -0.047138
v -0.772555 5.448008 0.693997
vt 0.375000 0.500000
vt 0.375000 0.750000
vt 0.375000 0.000000
vt 0.451471 0.250000
vt 0.625000 0.500000
vt 0.451471 0.500000
vt 0.625000 0.750000
vt 0.451471 0.750000
vt 0.465783 1.000000
vt 0.451471 1.000000
vt 0.375000 1.000000
vt 0.375000 0.250000
vt 0.451471 0.000000
vt 0.625000 1.000000
vt 0.375000 0.500000
vt 0.375000 0.750000
vt 0.451471 0.250000
vt 0.451471 0.500000
vt 0.625000 0.500000
vt 0.451471 0.750000
vt 0.625000 0.750000
vt 0.375000 0.250000
vn 0.0554 -0.9851 -0.1625
vn 0.9047 0.3371 -0.2604
vn 0.9859 0.0396 0.1628
vn 0.2807 0.8096 0.5155
vn 0.5573 -0.6072 0.5663
vn 0.8206 -0.5709 -0.0248
vn 0.8545 -0.4576 -0.2459
vn 0.2188 -0.3298 -0.9183
vn 0.3733 0.0000 0.9277
vn 0.3096 -0.9142 -0.2613
vn 0.4133 -0.4599 0.7859
vn 0.5554 0.1512 0.8177
vn 0.8453 -0.5324 0.0445
vn 0.3729 -0.5631 -0.7375
vn -0.0554 -0.9851 -0.1625
vn -0.9047 0.3371 -0.2604
vn -0.9859 0.0396 0.1628
vn -0.2807 0.8096 0.5155
vn -0.5573 -0.6072 0.5663
vn -0.8206 -0.5709 -0.0248
vn -0.8545 -0.4576 -0.2459
vn -0.2188 -0.3298 -0.9183
vn -0.3733 0.0000 0.9277
vn -0.3096 -0.9142 -0.2613
vn -0.4133 -0.4599 0.7859
vn -0.5554 0.1512 0.8177
vn -0.8453 -0.5324 0.0445
vn -0.3729 -0.5631 -0.7375
usemtl none
s off
c 15
f 67/86/66 68/87/66 66/88/66
f 73/89/67 69/90/67 74/91/67
f 74/91/68 69/92/68 75/93/68
f 75/93/69 77/94/69 76/95/69
f 68/87/70 75/93/70 71/96/70
f 67/86/71 74/91/71 68/87/71
f 67/97/72 73/89/72 74/91/72
f 66/88/73 72/98/73 73/89/73
f 77/94/74 75/93/74 70/99/74
f 71/96/75 66/88/75 68/87/75
f 71/96/76 75/93/76 76/95/76
f 70/99/77 75/93/77 69/92/77
f 68/87/78 74/91/78 75/93/78
f 73/89/79 67/97/79 66/88/79
f 78/100/80 66/88/80 79/101/80
f 81/102/81 82/103/81 80/104/81
f 82/103/82 83/105/82 80/106/82
f 83/105/83 76/95/83 77/94/83
f 79/101/84 71/96/84 83/105/84
f 78/100/85 79/101/85 82/103/85
f 78/107/86 82/103/86 81/102/86
f 66/88/87 81/102/87 72/98/87
f 77/94/88 70/99/88 83/105/88
f 71/96/89 79/101/89 66/88/89
f 71/96/90 76/95/90 83/105/90
f 70/99/91 80/106/91 83/105/91
f 79/101/92 83/105/92 82/103/92
f 81/102/93 66/88/93 78/107/93
]]
--]]
-->8
-- 3d functions


-- draw object
function draw_object(object,ox,oy,oz,yaw,pitch,roll,scale)

 -- get offset
	local ox,oy,oz=
	 (ox or 0)+object.x,
	 (oy or 0)+object.y,
	 (oz or 0)+object.z
	
	-- get rotation
	local yaw,pitch,roll=
	 (yaw or 0)+object.yaw,
	 (pitch or 0)+object.pitch,
	 (roll or 0)+object.roll

 -- get scale
 local s=(model.s or 1)*(scale or 1)

 -- copy model, avoids
 -- unnecessary repeats on loops
 local model=copy(object.model)

 -- merge object models together
 --local model=merge(unpack(object.models))

	--[[ reset all verts on status
	for i in all(model.verts) do
	 i.on=false
	end]]

	-- backface culling
	local drawfaces={}
 for face in all(model.faces) do

  local vert=object.model.verts[face[1].vert]

  -- rotate normal
  face.normal=rotatepoint(
   {
    face.normal.x,
    face.normal.y,
    face.normal.z
   }
   ,pitch,-yaw,-roll)

  --turn on faces that face cam
		if dotprod(
		  {
		   -face.normal[1],
		   face.normal[2],
		   face.normal[3]
    },
		  {
		   vert.x-cam.x,
		   vert.y-cam.y,
		   vert.z-cam.z
		  }
		 )>0
		then
		--[[
		 for i in all(face) do
		  model.verts[i.vert].on=true
		 end
		 vert.on=true
		 ]]
		 add(drawfaces,
		  {
		   verts={
		    copy(vert),
		    copy(object.model.verts[face[2].vert]),
		    copy(object.model.verts[face[3].vert])
		   },
		   colour=face.colour,
		   normal=face.normal
		  }
		 )
		end

 end

 -- ~60-80%


 -- project face verts
 for face in all(drawfaces) do
  for vert in all(face.verts) do

   vert.on=true

	  -- scale position
	  local point={
	   vert.x*s,
	   vert.y*s,
	   vert.z*s
	  }
	
	  -- rotate by model's rotation
	  point=rotatepoint(point,pitch,yaw,roll)
	
	  -- translate by cam and offset
	  point[1]-=cam.x-ox
	  point[2]-=cam.y-oy
	  point[3]-=cam.z-oz
	
	  -- rotate by cam's rotation
	  point=rotatepoint(point,cam.pitch,cam.yaw,cam.roll)
	
	  -- project to 2d
	  local distance=1
	  local z=1/(distance-point[3])
	  point[1]*=-z
	  point[2]*=z

	  -- ?
	  --point[3]=z

	  point[1]*=10
	  point[2]*=10

	  -- apply
	  vert.x,vert.y,vert.z=unpack(point)

	  --vert.on=not (vert.z<=0 or z>=distance or vert.x>64 or vert.x<-64 or vert.y>64 or vert.y<-64)

  end
 end



 -- sort faces
 local sortedfaces=drawfaces


--[[
 -- project verts
 for vert in all(model.verts) do
 if vert.on then

  -- scale position
  local point={
   vert.x*s,
   vert.y*s,
   vert.z*s
  }

  -- rotate by model's rotation
  point=rotatepoint(point,pitch,yaw,roll)

  -- translate by cam and offset
  point[1]-=cam.x-ox
  point[2]-=cam.y-oy
  point[3]-=cam.z-oz

  -- rotate by cam's rotation
  point=rotatepoint(point,cam.pitch,cam.yaw,cam.roll)

  -- project to 2d
  local distance=1
  local z=1/(distance-point[3])
  point[1]*=-z
  point[2]*=z
  
  
  --[[ draw
  pset(point[1],point[2])]]

 -- local s=10
  point[1]*=10
  point[2]*=10
--[[
  point[1]+=6
  point[2]-=10
]]
  -- apply
  vert.x,vert.y,vert.z=unpack(point)

  if vert.z<=0 or z>=distance or vert.x>64 or vert.x<-64 or vert.y>64 or vert.y<-64 then
   vert.on=false
  end

 end--on
 end--project
]]




 ?#sortedfaces,1,32,7
 ?sortedfaces[1].verts[1].x

 -- draw faces
 --              model.faces
 for face in all(sortedfaces) do
--[[
 	local v1=model.verts[face[1].vert]
	 local v2=model.verts[face[2].vert]
	 local v3=model.verts[face[3].vert]
]]
  local v1,v2,v3=unpack(face.verts)


  --if v1.on and v2.on and v3.on then
   local f=16
   local lit=face.normal[2]-face.normal[1]/3+face.normal[3]/10

   -- normal face
   if tonum(face.colour) then
    --local colour=face.colour+mid(1,6+(lit)*6,11)
    local colour=lit>0.2 and face.colour or dark[face.colour]

 	 	p01_triangle_335(
 	 	 64+v1.x*f,64-v1.y*f,
 	 	 64+v2.x*f,64-v2.y*f,
 	 	 64+v3.x*f,64-v3.y*f,
 	 	 --v3.z*s
 	 	 --13
 	 	 colour
 	 	)

   -- textured face
   else
 	 	p01_triangle_335(
 	 	 64+v1.x*f,64-v1.y*f,
 	 	 64+v2.x*f,64-v2.y*f,
 	 	 64+v3.x*f,64-v3.y*f,
 	 	 --v3.z*s
 	 	 --13
 	 	 rnd(-1)
 	 	)
   end
 	--end--on


	end--faces
	--]]

 ?yaw,1,1

end

-->8
-- functions

-- 1000 iterations: 55%
function matmul(mat,vec)

 local out={}

 for i=1,#vec do
  local val=0

  for k=1,#vec do
   val+=vec[k]*mat[i][k]
  end

  add(out,val)

 end

 return out

end


function dotprod(v1,v2)
 local out=0
 
 for i=1,#v1 do
  out+=v1[i]*v2[i]
 end

 return out

end


function copy(tbl)
local res={}
for k,v in pairs(tbl) do
 if(type(v)=="table")v=copy(v)
 res[k]=v
end
return res
end


function merge(...)
local res={}
for tbl in all(...) do
 for k,v in pairs(tbl) do
  -- add to existing entry
  if res[k] then
   if type(v)=="table" then
    res[k]=merge(res[k],v)
   else
    add(res[k],v)
   end

  -- make new entry
  else
   if(type(v)=="table")v=copy(v)
   res[k]=v
  end
 end

end

return res
end

--[[
function rotatepoint(point,x,y,z)

 local px,py,pz=unpack(point)

	if z and z~=0 then
		point=matmul(
		 {
			 {cos(z),sin(z),0},
			 {-sin(z),cos(z),0},
			 {0,0,1}
			},
		point)
	end

	if y and y~=0 then
		point=matmul(
		 {
			 {cos(y),0,sin(y)},
			 {0,1,0},
			 {-sin(y),0,cos(y)}
			},
		point)
	end

 if x and x~=0 then
		point=matmul(
		 {
			 {1,0,0},
			 {0,cos(x),sin(x)},
			 {0,-sin(x),cos(x)}
			},
		point)
	end

 return point

end
--]]

---[[
function rotatepoint(point,x,y,z)

 local px,py,pz=unpack(point)

 -- compacted rot functions, via
 -- mboffin's fps controller
	if z and z~=0 then
  py,px=cos(z)*py-sin(z)*px,cos(z)*px+sin(z)*py
 end

	if y and y~=0 then
  px,pz=cos(y)*px-sin(y)*pz,cos(y)*pz+sin(y)*px
 end

 if x and x~=0 then
  pz,py=cos(x)*pz-sin(x)*py,cos(x)*py+sin(x)*pz
 end

 return {px,py,pz}
end
--]]

function hexplit(data)
local tbl={}
for i in all(split(data,1)) do
add(tbl,tonum("0x"..i))
end
return tbl
end



-->8
-- trifill

function p01_trapeze_h(l,r,lt,rt,y0,y1)
 lt,rt=(lt-l)/(y1-y0),(rt-r)/(y1-y0)
 if(y0<0)l,r,y0=l-y0*lt,r-y0*rt,0
 y1=min(y1,128)
 for y0=y0,y1 do
  rectfill(l,y0,r,y0)
  l+=lt
  r+=rt
 end
end
function p01_trapeze_w(t,b,tt,bt,x0,x1)
 tt,bt=(tt-t)/(x1-x0),(bt-b)/(x1-x0)
 if(x0<0)t,b,x0=t-x0*tt,b-x0*bt,0
 x1=min(x1,128)
 for x0=x0,x1 do
  rectfill(x0,t,x0,b)
  t+=tt
  b+=bt
 end
end
function p01_triangle_335(x0,y0,x1,y1,x2,y2,col)
 color(col)
 if(y1<y0)x0,x1,y0,y1=x1,x0,y1,y0
 if(y2<y0)x0,x2,y0,y2=x2,x0,y2,y0
 if(y2<y1)x1,x2,y1,y2=x2,x1,y2,y1
 if max(x2,max(x1,x0))-min(x2,min(x1,x0)) > y2-y0 then
  col=x0+(x2-x0)/(y2-y0)*(y1-y0)
  p01_trapeze_h(x0,x0,x1,col,y0,y1)
  p01_trapeze_h(x1,col,x2,x2,y1,y2)
 else
  if(x1<x0)x0,x1,y0,y1=x1,x0,y1,y0
  if(x2<x0)x0,x2,y0,y2=x2,x0,y2,y0
  if(x2<x1)x1,x2,y1,y2=x2,x1,y2,y1
  col=y0+(y2-y0)/(x2-x0)*(x1-x0)
  p01_trapeze_w(y0,y0,y1,col,x0,x1)
  p01_trapeze_w(y1,col,y2,y2,x1,x2)
 end
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00700700000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00077000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00077000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00700700000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeee444444eeeeeeeeeeee444444eeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeee444444eeeeeeeeeeee444444eeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeee44eeeeee44eeeeeeee44eeeeee44eeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeee44eeeeee44eeeeeeee44eeeeee44eeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeee00000000eeeeeeee00000000eeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeee00000000eeeeeeee00000000eeeeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeee00eeccccee00eeee00eeccccee00eeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeee00eeccccee00eeee00eeccccee00eeeeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeee0000eecccceeee00eeeeeeccccee0000eeeeeeee
00000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeee0000eecccceeee00eeeeeeccccee0000eeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeee00ffeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeee00ffeeeeeeeeeeeeeeeeeeeeee
ee0000eeee0000ee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeee00ffffeeeeeeeeeeeeeeeeeeeeee
e0ecce0ee0ecce0e0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeee00ffffeeeeeeeeeeeeeeeeeeeeee
eeecceeeeeecce000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeee00ffffeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeee00ffffeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeee0000eeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeee0000eeeeeeeeeeeeeeeeeeeeee
eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
ee0000ee000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeee00000000eeeeeeeeeeeeeeeeeeee
eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeee00000000eeeeeeeeeeeeeeeeeeee
eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
e444eeeee444eeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
e44444eeeeee44ee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
eeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
__map__
000102030405060708090a0b0c0d0e0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
101112131415161718191a1b1c1d1e1f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
202122232425262728292a2b2c2d2e2f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303132333435363738393a3b3c3d3e3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
404142434445464748494a4b4c4d4e4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
505152535455565758595a5b5c5d5e5f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
606162636465666768696a6b6c6d6e6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
707172737475767778797a7b7c7d7e7f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
808182838485868788898a8b8c8d8e8f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
909192939495969798999a9b9c9d9e9f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a0a1a2a3a4a5a6a7a8a9aaabacadaeaf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b0b1b2b3b4b5b6b7b8b9babbbcbdbebf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c0c1c2c3c4c5c6c7c8c9cacbcccdcecf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d0d1d2d3d4d5d6d7d8d9dadbdcdddedf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e0e1e2e3e4e5e6e7e8e9eaebecedeeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
